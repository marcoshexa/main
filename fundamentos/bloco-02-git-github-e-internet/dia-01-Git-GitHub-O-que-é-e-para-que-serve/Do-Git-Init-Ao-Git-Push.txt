Criando um reposit√≥rio local
Caso queira fazer as instala√ß√µes simultaneamente √† leitura desse conte√∫do, o exerc√≠cio Parte 1 - Instala√ß√£o e configura√ß√£o deve ser conclu√≠do.
Antes de se criar um reposit√≥rio √© preciso criar uma pasta para ele. Para isso voc√™ deve utilizar o comando mkdir, como vimos anteriormente, e ent√£o navegar para a pasta criada com o comando cd.
Para criar um reposit√≥rio voc√™ deve digitar o comando git init. √â muito importante que esteja dentro da pasta criada para o reposit√≥rio.
Ap√≥s usar o git init a resposta do seu terminal ser√° algo parecido com a imagem a seguir:

Iniciando reposit√≥rio local
Como seu nome bem diz, esse comando √© respons√°vel por iniciar um reposit√≥rio Git dentro da pasta em que foi executado.
Para verificar se um reposit√≥rio Git foi de fato iniciado, voc√™ pode executar o comando git status, que retorna o status do reposit√≥rio, informando quais arquivos foram modificados, quais est√£o sendo monitorados, etc. No contexto de um reposit√≥rio rec√©m criado onde nenhuma modifica√ß√£o foi feita voc√™ receberia a seguinte resposta:
Copiar
No ramo master

No commits yet

nada para enviar (crie/copie arquivos e use "git add" para registrar)
Aten√ß√£o, contas e reposit√≥rios mais recentes no github n√£o possuem mais o termo "master" pela pejoratividade da palavra, esse termo foi substitu√≠do por "main" ent√£o talvez seja necess√°ria a altera√ß√£o dessa palavra em alguns c√≥digos.
Adicionando e comitando arquivos
Vamos adicionar um arquivo a esta pasta para ent√£o podermos versionar as altera√ß√µes feitas no novo reposit√≥rio.
Primeiro crie um arquivo .txt com o nome meu_arquivo e inclua a ele o texto:
Copiar
Meu primeiro reposit√≥rio Git.
Feita a cria√ß√£o do arquivo, ao executar o comando git status, voc√™ ir√° receber uma resposta parecida com essa:

Resposta do git status com altera√ß√µes
Para que possamos versionar altera√ß√µes feitas no c√≥digo √© preciso sempre seguir a seguinte sequ√™ncia:
‚ö†Ô∏è Embora n√£o seja necess√°rio, √© considerado uma boa pr√°tica usar o comando git status para checar quais arquivos foram modificados antes de usar o git add. Dessa forma, voc√™ consegue visualizar quais arquivos foram modificados, garantindo que executar√° o comando git add . sem enviar arquivos indesejados. ‚ö†Ô∏è
‚ö†Ô∏è Voc√™ tamb√©m pode usar o git status ap√≥s o git add. Isso mostrar√° quais arquivos est√£o no staging, que √© a √°rea de arquivos que est√£o preparados para serem enviados no pr√≥ximo commit.
Adicionar (add)
Comitar (commit -m "mensagem")
‚ö†Ô∏è N√£o √© poss√≠vel realizar um commit em um diret√≥rio vazio! √â necess√°rio ao menos um arquivo criado dentro dele, ainda que em branco. ‚ö†Ô∏è
Os comandos ficam da seguinte forma:
Copiar
# Execute o comando git status para verificar o status do reposit√≥rio
# Adicionar todos os arquivos modificados
git add .

# Ou voc√™ tamb√©m pode adicionar arquivos espec√≠ficos
git add meu_arquivo.txt meu_outro_arquivo.txt

# Ent√£o voc√™ comita a altera√ß√£o
# Ao comitar voc√™ deve adicionar tamb√©m uma mensagem que descreve o que aquela altera√ß√£o faz

git commit -m "Mensagem sobre a altera√ß√£o feita"
‚ö†Ô∏è Embora o git add . seja mais pr√°tico, em alguns casos voc√™ n√£o vai querer enviar todos os arquivos modificados. Lembre-se que voc√™ pode usar o git add para selecionar arquivos espec√≠ficos sempre que precisar, basta nomear cada arquivo que quer adicionar e separ√°-los por espa√ßos.
Ap√≥s adicionar e fazer um commit de suas altera√ß√µes, voc√™ receber√° no terminal algo parecido com a pr√≥xima imagem:

Resposta do git commit ap√≥s altera√ß√µes
üëÄ De olho na dica: √â considerada uma boa pr√°tica o h√°bito de realizar commits com frequ√™ncia. Isso facilita o acompanhamento das altera√ß√µes e tamb√©m na corre√ß√£o de poss√≠veis erros em seu c√≥digo. Procure evitar commits muito extensos e/ou com muitas altera√ß√µes.
Feito isso, agora queremos conectar nosso reposit√≥rio local com um reposit√≥rio remoto para enviar as novas altera√ß√µes, mas antes, vamos ver como criar um reposit√≥rio remoto no GitHub
Criando um reposit√≥rio no GitHub
Caso queira fazer as instala√ß√µes simultaneamente √† leitura desse conte√∫do, o exerc√≠cio Parte 2 - Criar conta no GitHub e o exerc√≠cio Parte 3 - Adicionando uma chave SSH na sua conta do GitHub devem ser conclu√≠dos.
Para isso acesse o GitHub e procure o √≠cone com um sinal + na barra superior e ao clicar nele busca pela op√ß√£o New repository. Voc√™ ser√° redirecionado para uma p√°gina semelhante a essa:

P√°gina de cria√ß√£o de reposit√≥rio
Voc√™ deve ent√£o adicionar um nome ao seu reposit√≥rio, como por exemplo meu-super-repo. Ap√≥s fazer isso o bot√£o Create repository ser√° habilitado e ao clicar nele seu reposit√≥rio ser√° criado.
Por enquanto ignore as outras op√ß√µes, a medida que for avan√ßando no curso voc√™ aprender√° mais sobre elas!
Como seu reposit√≥rio estar√° vazio, o GitHub lhe dar√° algumas dicas, voc√™ ver√° uma p√°gina parecida com essa:

Reposit√≥rio vazio criado
Voc√™ dever√° clicar no bot√£o SSH e ent√£o copiar a URL gerada. Voc√™ ir√° precisar dela para realizar a conex√£o entre seu reposit√≥rio local e seu reposit√≥rio remoto.
Conectando o reposit√≥rio local com o remoto
Para conectar os dois reposit√≥rios voc√™ dever√° abrir o seu terminal, acessar o diret√≥rio do seu reposit√≥rio e ent√£o executar o seguinte comando:
Copiar
git remote add origin git@github.com:user-github/repo-name.git
Sendo origin um apelido para o seu reposit√≥rio, poderia ser qualquer outro. E no lugar da URL git@github.com:user-github/repo-name.git deve ir a gerada pelo seu reposit√≥rio (aquela que acabamos de copiar no passo acima).
Para verificar que tudo funcionou corretamente, execute o comando git remote -v, voc√™ obter√° um resultado semelhante a esse:
Copiar
origin	git@github.com:user-github/repo-name.git (fetch)
origin	git@github.com:user-github/repo-name.git (push)
Sincronizando os reposit√≥rios
Os reposit√≥rios j√° est√£o criados e tamb√©m j√° est√£o conectados, agora √© a hora de enviar as altera√ß√µes feitas no reposit√≥rio local para o reposit√≥rio remoto.
Para isso, certifique-se que as altera√ß√µes j√° foram adicionadas e comitadas utilizando o comando git status, caso esteja tudo certo, voc√™ receber√° uma mensagem no terminal parecida com a imagem a seguir:

Resposta do git status sem altera√ß√µes pendentes de commit
Caso tenha alguma altera√ß√£o que n√£o foi comitada, fa√ßa o commit para depois enviar as altera√ß√µes.
Com tudo comitado √© hora de enviar essas altera√ß√µes para o resposit√≥rio remoto utilizando o seguinte comando:
Copiar
git push origin master
Com isso, voc√™ est√° enviando as altera√ß√µes feitas localmente para a branch principal, main ou master, do seu reposit√≥rio remoto, origin.
Se tudo ocorreu conforme o esperado, acesse novamente, ou atualize, a p√°gina do seu reposit√≥rio no GitHub, voc√™ ent√£o ver√° que os arquivos e altera√ß√µes que comitou agora se encontram l√°!
Resumo
Em suma, todo esse processo acontece nessa ordem:
Uma pasta √© criada para armazenar um reposit√≥rio local (mkdir <nome da pasta>);
Nos movemos para a pasta criada (cd <nome da pasta criada>);
Um reposit√≥rio local √© criado nessa pasta, e aqui j√° ser√° poss√≠vel ter controle de versionamento (git init);
Modificamos os arquivos que queremos modificar;
Verificamos quais arquivos foram alterados (git status);
Arquivos selecionados pelo usu√°rio s√£o adicionados ao que ser√° modificado na pr√≥xima vers√£o (git add);
Uma nova vers√£o desse reposit√≥rio local √© criada com uma descri√ß√£o do que essa vers√£o muda em rela√ß√£o √† antiga (git commit -m "<mensagem desejada>");
Empurra as altera√ß√µes do reposit√≥rio local para o reposit√≥rio remoto (git push).
D√™ seu feedback
¬© Trybe 2022
¬∑
Manual da Pessoa Estudante
Feito e constantemente atualizado pelo time Trybe com Elixir, Phoenix, React, Tailwind CSS e üíö